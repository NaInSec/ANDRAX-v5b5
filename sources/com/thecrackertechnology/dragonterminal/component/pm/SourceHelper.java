package com.thecrackertechnology.dragonterminal.component.pm;

import com.thecrackertechnology.dragonterminal.frontend.component.ComponentManager;
import com.thecrackertechnology.dragonterminal.frontend.logging.NLog;
import java.io.File;
import java.net.URL;
import java.util.ArrayList;
import java.util.List;
import kotlin.Metadata;
import kotlin.TypeCastException;
import kotlin.collections.CollectionsKt;
import kotlin.jvm.internal.Intrinsics;
import kotlin.text.Regex;
import kotlin.text.StringsKt;
import org.apache.commons.lang3.StringUtils;

@Metadata(bv = {1, 0, 3}, d1 = {"\u0000.\n\u0002\u0018\u0002\n\u0002\u0010\u0000\n\u0002\b\u0002\n\u0002\u0010\u000e\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010 \n\u0002\u0018\u0002\n\u0000\n\u0002\u0010\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\bÆ\u0002\u0018\u00002\u00020\u0001B\u0007\b\u0002¢\u0006\u0002\u0010\u0002J\u000e\u0010\u0003\u001a\u00020\u00042\u0006\u0010\u0005\u001a\u00020\u0006J\f\u0010\u0007\u001a\b\u0012\u0004\u0012\u00020\t0\bJ\u0006\u0010\n\u001a\u00020\u000bJ\u000e\u0010\n\u001a\u00020\u000b2\u0006\u0010\f\u001a\u00020\r¨\u0006\u000e"}, d2 = {"Lcom/thecrackertechnology/dragonterminal/component/pm/SourceHelper;", "", "()V", "detectSourceFilePrefix", "", "source", "Lcom/thecrackertechnology/dragonterminal/component/pm/Source;", "detectSourceFiles", "", "Ljava/io/File;", "syncSource", "", "sourceManager", "Lcom/thecrackertechnology/dragonterminal/component/pm/SourceManager;", "app_release"}, k = 1, mv = {1, 1, 15})
/* compiled from: SourceHelper.kt */
public final class SourceHelper {
    public static final SourceHelper INSTANCE = new SourceHelper();

    private SourceHelper() {
    }

    public final void syncSource() {
        SourceManager sourceManager = ((PackageComponent) ComponentManager.getComponent$default(ComponentManager.INSTANCE, PackageComponent.class, false, 2, (Object) null)).getSourceManager();
        Intrinsics.checkExpressionValueIsNotNull(sourceManager, "sourceManager");
        syncSource(sourceManager);
    }

    public final void syncSource(SourceManager sourceManager) {
        Intrinsics.checkParameterIsNotNull(sourceManager, "sourceManager");
        StringBuilder sb = new StringBuilder();
        sb.append("# Generated by NeoTerm-Preference\n");
        CollectionsKt.joinTo$default(sourceManager.getEnabledSources(), sb, StringUtils.LF, (CharSequence) null, (CharSequence) null, 0, (CharSequence) null, SourceHelper$syncSource$content$1$1.INSTANCE, 60, (Object) null);
        Intrinsics.checkExpressionValueIsNotNull(sb.toString(), "StringBuilder().apply(builderAction).toString()");
    }

    public final List<File> detectSourceFiles() {
        ((PackageComponent) ComponentManager.getComponent$default(ComponentManager.INSTANCE, PackageComponent.class, false, 2, (Object) null)).getSourceManager();
        return new ArrayList<>();
    }

    public final String detectSourceFilePrefix(Source source) {
        Intrinsics.checkParameterIsNotNull(source, "source");
        try {
            URL url = new URL(source.url);
            StringBuilder sb = new StringBuilder(url.getHost());
            if (url.getPort() != -1) {
                StringBuilder sb2 = new StringBuilder();
                sb2.append(':');
                sb2.append(url.getPort());
                sb.append(sb2.toString());
            }
            String path = url.getPath();
            if (path != null) {
                if (path.length() > 0) {
                    sb.append("_");
                    String replace$default = StringsKt.replace$default(path, "/", "_", false, 4, (Object) null);
                    if (replace$default != null) {
                        String substring = replace$default.substring(1);
                        Intrinsics.checkExpressionValueIsNotNull(substring, "(this as java.lang.String).substring(startIndex)");
                        sb.append(substring);
                    } else {
                        throw new TypeCastException("null cannot be cast to non-null type java.lang.String");
                    }
                }
            }
            StringBuilder sb3 = new StringBuilder();
            sb3.append("_dists_");
            String str = source.repo;
            Intrinsics.checkExpressionValueIsNotNull(str, "source.repo");
            sb3.append(new Regex(StringUtils.SPACE).replace((CharSequence) str, "_"));
            sb3.append("_binary-");
            sb.append(sb3.toString());
            String sb4 = sb.toString();
            Intrinsics.checkExpressionValueIsNotNull(sb4, "builder.toString()");
            return sb4;
        } catch (Exception e) {
            NLog nLog = NLog.INSTANCE;
            nLog.e("PM", "Failed to detect source file prefix: " + e.getLocalizedMessage());
            return "";
        }
    }
}
